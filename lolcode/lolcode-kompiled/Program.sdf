module Program

imports Common
imports KBuiltinsBasic
exports

context-free syntax
context-free start-symbols
DzString DzBool Statement CodeBlock Label String Int Assignment Float Bool Exps ProgramStart Value Id Ddeclaration PrintBlock Exp DzInt InputBlock DzFloat K
context-free syntax
    "HAI" InsertDzCodeBlock "KTHXBAI" -> ProgramStart {cons("ProgramStart1290Syn")}
    Statement CodeBlock -> CodeBlock {cons("CodeBlock1454Syn")}
    DzString -> String {}
    DzBool -> Bool {}
    Statement -> CodeBlock {}
    DzInt -> Int {}
    Label "R" Exp -> Assignment {cons("Assignment1477Syn")}
    Statement Statement -> Statement {cons("Statement19Syn")}
    "GIMMEH" String -> InputBlock {cons("InputBlock167Syn")}
    String -> Value {}
    {Exp ","}* -> Exps {cons("Exps1ListSyn")}
    "VISIBLE" InsertDzExps "MKAY?" -> PrintBlock {cons("PrintBlock1378Syn")}
    PrintBlock ";" -> Statement {cons("Statement1405Syn")}
    DzFloat -> Float {}
    InputBlock ";" -> Statement {cons("Statement1309Syn")}
    "I HAS A" Label -> Ddeclaration {cons("Ddeclaration153Syn")}
    Int -> Value {}
    Value -> Exp {}
    Ddeclaration ";" -> Statement {cons("Statement1448Syn")}
    Bool -> Value {}
    Exps -> InsertDzExps
    CodeBlock -> InsertDzCodeBlock


    DzDzString        -> DzString    {cons("DzString1Const")}
    DzDzBool        -> DzBool    {cons("DzBool1Const")}
    DzDzInt        -> DzInt    {cons("DzInt1Const")}
    DzDzId        -> DzId    {cons("DzId1Const")}
    DzDzFloat        -> DzFloat    {cons("DzFloat1Const")}



%% start symbols subsorts
    KItem        -> K
    DzString        -> K
    DzBool        -> K
    Statement        -> K
    CodeBlock        -> K
    Label        -> K
    String        -> K
    Int        -> K
    Assignment        -> K
    Float        -> K
    Bool        -> K
    ProgramStart        -> K
    Value        -> K
    Id        -> K
    Ddeclaration        -> K
    PrintBlock        -> K
    Exp        -> K
    DzInt        -> K
    InputBlock        -> K
    DzFloat        -> K
lexical syntax
    "Infinity" -> DzDzFloat
    "true" -> DzDzBool
    "false" -> DzDzBool
    "NaN" -> DzDzFloat


    "Infinity" -> IdDz {reject}
    "false" -> IdDz {reject}
    "VISIBLE" -> IdDz {reject}
    "HAI" -> IdDz {reject}
    "R" -> IdDz {reject}
    "GIMMEH" -> IdDz {reject}
    "true" -> IdDz {reject}
    "NaN" -> IdDz {reject}
    "KTHXBAI" -> IdDz {reject}

lexical restrictions
    %% follow restrictions


lexical syntax
    [A-Za-z\_][A-Za-z0-9\_]* -> IdDz
    "Infinity" -> IdDz {reject}
    "false" -> IdDz {reject}
    "VISIBLE" -> IdDz {reject}
    "HAI" -> IdDz {reject}
    "R" -> IdDz {reject}
    "GIMMEH" -> IdDz {reject}
    "true" -> IdDz {reject}
    "NaN" -> IdDz {reject}
    "KTHXBAI" -> IdDz {reject}
    [\-\+]? [0-9]+ -> DzIntDz
    [a-z][\_a-zA-Z0-9]* -> LabelDz
    "false" -> LabelDz {reject}
    "true" -> LabelDz {reject}
    [\+\-]?[0-9]+"."[0-9]+([eE][\+\-]?[0-9]+)?([fFdD]|([pP][0-9]+[xX][0-9]+))? -> DzFloatDz
    [\+\-]?"Infinity"([fFdD]|([pP][0-9]+[xX][0-9]+))? -> DzFloatDz
    "Infinity" -> DzFloatDz {reject}
    "NaN"([fFdD]|([pP][0-9]+[xX][0-9]+))? -> DzFloatDz
    "NaN" -> DzFloatDz {reject}
    "\"" ((~[\"\n\r\\]) | (((([\\][nrtf\"\\]) | ([\\][x][0-9a-fA-F][0-9a-fA-F])) | ([\\][u][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F])) | ([\\][U][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F])))* "\"" -> DzStringDz
context-free syntax
    DzStringDz -> DzString {cons("DzString1Const")}
    LabelDz -> Label {cons("Label1Const")}
    IdDz -> Id {cons("Id1Const")}
    DzIntDz -> DzInt {cons("DzInt1Const")}
    DzFloatDz -> DzFloat {cons("DzFloat1Const")}


context-free restrictions
    Id -/- [A-Za-z0-9\_]
    DzInt -/-  [0-9]
    Label -/- [\_a-zA-Z0-9]
