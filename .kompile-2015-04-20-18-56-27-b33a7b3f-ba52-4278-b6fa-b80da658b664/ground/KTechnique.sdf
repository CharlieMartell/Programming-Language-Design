%% Copyright (c) 2011-2014 K Team. All Rights Reserved.
%% Grammar for the K language
module KTechnique
imports Common %% For Comments and whitespace
imports KBuiltinsBasic

exports
context-free priorities
{
	".K"				-> K {cons("K12Empty"), prefer}
	DotDz				-> K {cons("K1Empty")}
	K "~>" K			-> K {left, cons("K1Seq")}
	".List{K}"			-> KList {cons("ListDlKDr12Empty")}
	".KList"			-> KList {cons("KList12Empty")}
	KList   ",," KList	-> KList {left, cons("KList1List")}
} > { non-assoc:
	K "=>" K			-> K {non-assoc, cons("K1Rewrite")}
	KList  "=>" KList	-> KList {non-assoc, cons("KList1Rewrite")}
	KLabel "=>" KLabel	-> KLabel {cons("KLabel1Rewrite")}
}
context-free syntax
	KLabel "(" KList ")"-> KItem {cons("K1App")}
	K					-> KList %%{cons("ListOfK3K")}
	KItem				-> K
	"(" KList ")"		-> KList {cons("KList1Bracket")}
	"(" K ")"			-> K {cons("K1Bracket")}
	"(" KLabel ")"		-> KLabel {cons("KLabel1Bracket")}

context-free priorities
{
	".Bag"				-> Bag {cons("Bag12Empty"), prefer}
	DotDz				-> Bag {cons("Bag1Empty")}
	BagItem				-> Bag
	"BagItem" "(" K ")" -> BagItem {cons("BagItem1BIKItem")}
	%%BagItem+			-> Bag {cons("BagList")}
	Bag Bag				-> Bag {left, cons("Bag1List")}
} > {
	Bag "=>" Bag		-> Bag {non-assoc, cons("Bag1Rewrite")}
}
context-free syntax
	%%"(" BagItem ")"	-> BagItem {bracket}
	"(" Bag ")"			-> Bag {cons("Bag1Bracket")}

	DotDz				-> Map  {cons("Map1Empty")}
	DotDz				-> Set  {cons("Set1Empty")}
	DotDz				-> List {cons("List1Empty")}

	"." -> DotDz

context-free restrictions
	DotDz		-/- [a-zA-Z\.]

lexical restrictions
	".Bag"		-/- [a-zA-Z0-9]
	".BagItem"	-/- [a-zA-Z0-9]
	".K"		-/- [a-zA-Z0-9]
	".List{K}"	-/- [a-zA-Z0-9]
	".KList"	-/- [a-zA-Z0-9]

	"Bag"		-/- [a-zA-Z0-9]
	"BagItem"	-/- [a-zA-Z0-9]
	"K"			-/- [a-zA-Z0-9]
	"List{K}"	-/- [a-zA-Z0-9]
	"KList"		-/- [a-zA-Z0-9]

