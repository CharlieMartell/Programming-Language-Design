module Program

imports Common
imports KBuiltinsBasic
exports

context-free syntax
context-free priorities
{
    Stmt -> Stmts {}
} > {
    Stmts Stmts -> Stmts {left, cons("Stmts1205Syn")}
}

context-free start-symbols
DzString DzBool Set Stmts Lol Conditional K String KList Int Stmt Float Bool Id Exp DzInt KItem DzFloat Sep K
context-free syntax
    DzString -> String {}
    Set Set -> Set {left, cons("Set1244Syn")}
    Sep "~> newline ~>" Stmt -> Sep {cons("Sep1267Syn")}
    DzInt -> Int {}
    Stmt -> Sep {}
    DzFloat -> Float {}
    Bool -> Exp {}
    "#renameVariables" "(" InsertDzK ")" -> K {cons("K163Syn")}
    "wtf" InsertDzExp InsertDzStmts "brb" -> Stmt {cons("Stmt195Syn")}
    "#freezeVariables" "(" InsertDzK "," InsertDzK ")" -> K {cons("K1200Syn")}
    "#metaVariables" "(" InsertDzK ")" -> Set {cons("Set1385Syn")}
    Exp "iz" Exp -> Stmt {cons("Stmt1329Syn")}
    K "in" Set -> Bool {cons("Bool1332Syn")}
    DzBool -> Bool {}
    Id -> Exp {}
    "SetItem" "(" InsertDzK ")" -> Set {cons("Set1256Syn")}
    Set "<=Set" Set -> Bool {cons("Bool1208Syn")}
    "size" "(" InsertDzSet ")" -> Int {cons("Int1387Syn")}
    Int -> Exp {}
    Exp "nope" "iz" "liek" Exp -> Conditional {cons("Conditional167Syn")}
    "choice" "(" InsertDzSet ")" -> K {cons("K1258Syn")}
    "rofl" Exp -> Stmt {cons("Stmt172Syn")}
    Exp "nope" "iz" "uber" Exp -> Conditional {cons("Conditional134Syn")}
    "newline" -> KItem {cons("KItem135Syn")}
    Conditional -> Exp {}
    "#variablesMap" "(" InsertDzK ")" -> KItem {cons("KItem1262Syn")}
    Exp "iz" "uber" Exp -> Conditional {cons("Conditional177Syn")}
    K -> KList {}
    "#variables" "(" InsertDzK ")" -> Set {cons("Set1393Syn")}
    KItem -> K {}
    "debug" -> KItem {cons("KItem1297Syn")}
    "intersectSet" "(" InsertDzSet "," InsertDzSet ")" -> Set {cons("Set1238Syn")}
    ".Set" -> Set {cons("Set1300Syn")}
    "#unifiable" "(" InsertDzK "," InsertDzK ")" -> Bool {cons("Bool145Syn")}
    Set "-Set" Set -> Set {cons("Set148Syn")}
    Exp "iz" "liek" Exp -> Conditional {cons("Conditional149Syn")}
    "#rename" "(" InsertDzK "," InsertDzSet ")" -> K {cons("K150Syn")}
    Stmts -> InsertDzStmts
    Set -> InsertDzSet
    K -> InsertDzK
    Exp -> InsertDzExp


    DzDzString        -> DzString    {cons("DzString1Const")}
    DzDzBool        -> DzBool    {cons("DzBool1Const")}
    DzDzInt        -> DzInt    {cons("DzInt1Const")}
    DzDzId        -> DzId    {cons("DzId1Const")}
    DzDzFloat        -> DzFloat    {cons("DzFloat1Const")}



%% start symbols subsorts
    KItem        -> K
    DzString        -> K
    DzBool        -> K
    Set        -> K
    Stmts        -> K
    Lol        -> K
    Conditional        -> K
    String        -> K
    Int        -> K
    Stmt        -> K
    Float        -> K
    Bool        -> K
    Id        -> K
    Exp        -> K
    DzInt        -> K
    DzFloat        -> K
    Sep        -> K
lexical syntax
    "Infinity" -> DzDzFloat
    "true" -> DzDzBool
    "false" -> DzDzBool
    "NaN" -> DzDzFloat


    "nope" -> IdDz {reject}
    "uber" -> IdDz {reject}
    "liek" -> IdDz {reject}
    "newline" -> IdDz {reject}
    "brb" -> IdDz {reject}
    "NaN" -> IdDz {reject}
    "intersectSet" -> IdDz {reject}
    "debug" -> IdDz {reject}
    "Infinity" -> IdDz {reject}
    "in" -> IdDz {reject}
    "false" -> IdDz {reject}
    "wtf" -> IdDz {reject}
    "SetItem" -> IdDz {reject}
    "iz" -> IdDz {reject}
    "size" -> IdDz {reject}
    "rofl" -> IdDz {reject}
    "true" -> IdDz {reject}
    "choice" -> IdDz {reject}

lexical restrictions
    %% follow restrictions
    "#rename" -/- [V].[a].[r].[i].[a].[b].[l].[e].[s]
    "#variables" -/- [M].[a].[p]


lexical syntax
    [A-Za-z\_][A-Za-z0-9\_]* -> IdDz
    "nope" -> IdDz {reject}
    "uber" -> IdDz {reject}
    "liek" -> IdDz {reject}
    "newline" -> IdDz {reject}
    "brb" -> IdDz {reject}
    "NaN" -> IdDz {reject}
    "intersectSet" -> IdDz {reject}
    "debug" -> IdDz {reject}
    "Infinity" -> IdDz {reject}
    "in" -> IdDz {reject}
    "false" -> IdDz {reject}
    "wtf" -> IdDz {reject}
    "SetItem" -> IdDz {reject}
    "iz" -> IdDz {reject}
    "size" -> IdDz {reject}
    "rofl" -> IdDz {reject}
    "true" -> IdDz {reject}
    "choice" -> IdDz {reject}
    [\-\+]? [0-9]+ -> DzIntDz
    [\+\-]?[0-9]+"."[0-9]+([eE][\+\-]?[0-9]+)?([fFdD]|([pP][0-9]+[xX][0-9]+))? -> DzFloatDz
    [\+\-]?"Infinity"([fFdD]|([pP][0-9]+[xX][0-9]+))? -> DzFloatDz
    "Infinity" -> DzFloatDz {reject}
    "NaN"([fFdD]|([pP][0-9]+[xX][0-9]+))? -> DzFloatDz
    "NaN" -> DzFloatDz {reject}
    "\"" ((~[\"\n\r\\]) | (((([\\][nrtf\"\\]) | ([\\][x][0-9a-fA-F][0-9a-fA-F])) | ([\\][u][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F])) | ([\\][U][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F])))* "\"" -> DzStringDz
    [a-z][a-zA-Z0-9\_]* -> LolDz
    "#metaVariables" -> LolDz {reject}
    ".Set" -> LolDz {reject}
    "nope" -> LolDz {reject}
    "<=Set" -> LolDz {reject}
    "uber" -> LolDz {reject}
    "#unifiable" -> LolDz {reject}
    "liek" -> LolDz {reject}
    "newline" -> LolDz {reject}
    "brb" -> LolDz {reject}
    "NaN" -> LolDz {reject}
    "intersectSet" -> LolDz {reject}
    "-Set" -> LolDz {reject}
    "debug" -> LolDz {reject}
    "Infinity" -> LolDz {reject}
    "#rename" -> LolDz {reject}
    "in" -> LolDz {reject}
    "(" -> LolDz {reject}
    "false" -> LolDz {reject}
    "wtf" -> LolDz {reject}
    ")" -> LolDz {reject}
    "#variables" -> LolDz {reject}
    "," -> LolDz {reject}
    "SetItem" -> LolDz {reject}
    "iz" -> LolDz {reject}
    "~> newline ~>" -> LolDz {reject}
    "#renameVariables" -> LolDz {reject}
    "size" -> LolDz {reject}
    "#variablesMap" -> LolDz {reject}
    "rofl" -> LolDz {reject}
    "true" -> LolDz {reject}
    "#freezeVariables" -> LolDz {reject}
    "choice" -> LolDz {reject}
context-free syntax
    DzStringDz -> DzString {cons("DzString1Const")}
    LolDz -> Lol {cons("Lol1Const")}
    IdDz -> Id {cons("Id1Const")}
    DzIntDz -> DzInt {cons("DzInt1Const")}
    DzFloatDz -> DzFloat {cons("DzFloat1Const")}


context-free restrictions
    Id -/- [A-Za-z0-9\_]
    DzInt -/-  [0-9]
    Lol -/- [a-zA-Z0-9\_]
