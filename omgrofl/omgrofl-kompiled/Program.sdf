module Program

imports Common
imports KBuiltinsBasic
exports

context-free syntax
context-free priorities
{
    Stmt -> Stmts {}
} > {
    Stmts Stmts -> Stmts {left, cons("Stmts1206Syn")}
}

context-free start-symbols
DzString Loop DzBool Stmts Lol Conditional String Int Stmt Assignment Float Bool Id Exp DzInt KItem DzFloat K
context-free syntax
    "4" InsertDzExp "iz" InsertDzExp "2lmfao" InsertDzExp InsertDzStmts "brb" -> Stmt {cons("Stmt1243Syn")}
    Assignment -> Exp {}
    "lulz" Exp -> Stmt {cons("Stmt1308Syn")}
    DzString -> String {}
    Exp "to" "/dev/null" -> Stmt {cons("Stmt1380Syn")}
    DzInt -> Int {}
    "l33t" Id -> Stmt {cons("Stmt1249Syn")}
    Exp -> Stmt {}
    "haxor" Id -> Stmt {cons("Stmt1277Syn")}
    DzFloat -> Float {}
    Bool -> Exp {}
    Bool -> Conditional {}
    "wtf" InsertDzExp InsertDzStmts "brb" -> Stmt {cons("Stmt196Syn")}
    "tldr" -> Stmt {cons("Stmt1366Syn")}
    "rtfm" InsertDzStmts "brb" -> Loop {cons("Loop1394Syn")}
    Exp "iz" Exp -> Assignment {cons("Assignment127Syn")}
    Loop -> Stmt {}
    DzBool -> Bool {}
    Id -> Exp {}
    "stfw" Id -> Stmt {cons("Stmt132Syn")}
    Int -> Exp {}
    Exp "nope" "iz" "liek" Exp -> Conditional {cons("Conditional168Syn")}
    "lmao" Exp -> Stmt {cons("Stmt1342Syn")}
    "rofl" Exp -> Stmt {cons("Stmt173Syn")}
    Exp "nope" "iz" "uber" Exp -> Conditional {cons("Conditional136Syn")}
    "newline" -> KItem {cons("KItem137Syn")}
    Conditional -> Exp {}
    Exp "iz" "uber" Exp -> Conditional {cons("Conditional178Syn")}
    "n00b" Exp -> Stmt {cons("Stmt1347Syn")}
    "stfu" -> Stmt {cons("Stmt1267Syn")}
    Exp "iz" "liek" Exp -> Conditional {cons("Conditional152Syn")}
    Stmts -> InsertDzStmts
    Exp -> InsertDzExp


    DzDzString        -> DzString    {cons("DzString1Const")}
    DzDzBool        -> DzBool    {cons("DzBool1Const")}
    DzDzInt        -> DzInt    {cons("DzInt1Const")}
    DzDzId        -> DzId    {cons("DzId1Const")}
    DzDzFloat        -> DzFloat    {cons("DzFloat1Const")}



%% start symbols subsorts
    KItem        -> K
    DzString        -> K
    Loop        -> K
    DzBool        -> K
    Stmts        -> K
    Lol        -> K
    Conditional        -> K
    String        -> K
    Int        -> K
    Stmt        -> K
    Assignment        -> K
    Float        -> K
    Bool        -> K
    Id        -> K
    Exp        -> K
    DzInt        -> K
    DzFloat        -> K
lexical syntax
    "Infinity" -> DzDzFloat
    "true" -> DzDzBool
    "false" -> DzDzBool
    "NaN" -> DzDzFloat


    "stfw" -> IdDz {reject}
    "nope" -> IdDz {reject}
    "n00b" -> IdDz {reject}
    "stfu" -> IdDz {reject}
    "uber" -> IdDz {reject}
    "liek" -> IdDz {reject}
    "newline" -> IdDz {reject}
    "brb" -> IdDz {reject}
    "l33t" -> IdDz {reject}
    "NaN" -> IdDz {reject}
    "lmao" -> IdDz {reject}
    "Infinity" -> IdDz {reject}
    "lulz" -> IdDz {reject}
    "haxor" -> IdDz {reject}
    "false" -> IdDz {reject}
    "wtf" -> IdDz {reject}
    "tldr" -> IdDz {reject}
    "iz" -> IdDz {reject}
    "rofl" -> IdDz {reject}
    "true" -> IdDz {reject}
    "to" -> IdDz {reject}
    "rtfm" -> IdDz {reject}

lexical restrictions
    %% follow restrictions


lexical syntax
    [A-Za-z\_][A-Za-z0-9\_]* -> IdDz
    "stfw" -> IdDz {reject}
    "nope" -> IdDz {reject}
    "n00b" -> IdDz {reject}
    "stfu" -> IdDz {reject}
    "uber" -> IdDz {reject}
    "liek" -> IdDz {reject}
    "newline" -> IdDz {reject}
    "brb" -> IdDz {reject}
    "l33t" -> IdDz {reject}
    "NaN" -> IdDz {reject}
    "lmao" -> IdDz {reject}
    "Infinity" -> IdDz {reject}
    "lulz" -> IdDz {reject}
    "haxor" -> IdDz {reject}
    "false" -> IdDz {reject}
    "wtf" -> IdDz {reject}
    "tldr" -> IdDz {reject}
    "iz" -> IdDz {reject}
    "rofl" -> IdDz {reject}
    "true" -> IdDz {reject}
    "to" -> IdDz {reject}
    "rtfm" -> IdDz {reject}
    [\-\+]? [0-9]+ -> DzIntDz
    "4" -> DzIntDz {reject}
    [\+\-]?[0-9]+"."[0-9]+([eE][\+\-]?[0-9]+)?([fFdD]|([pP][0-9]+[xX][0-9]+))? -> DzFloatDz
    "4" -> DzFloatDz {reject}
    [\+\-]?"Infinity"([fFdD]|([pP][0-9]+[xX][0-9]+))? -> DzFloatDz
    "Infinity" -> DzFloatDz {reject}
    "NaN"([fFdD]|([pP][0-9]+[xX][0-9]+))? -> DzFloatDz
    "NaN" -> DzFloatDz {reject}
    "\"" ((~[\"\n\r\\]) | (((([\\][nrtf\"\\]) | ([\\][x][0-9a-fA-F][0-9a-fA-F])) | ([\\][u][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F])) | ([\\][U][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F])))* "\"" -> DzStringDz
    [a-z][a-zA-Z0-9\_]* -> LolDz
    "stfw" -> LolDz {reject}
    "nope" -> LolDz {reject}
    "n00b" -> LolDz {reject}
    "stfu" -> LolDz {reject}
    "uber" -> LolDz {reject}
    "liek" -> LolDz {reject}
    "newline" -> LolDz {reject}
    "brb" -> LolDz {reject}
    "l33t" -> LolDz {reject}
    "NaN" -> LolDz {reject}
    "lmao" -> LolDz {reject}
    "Infinity" -> LolDz {reject}
    "lulz" -> LolDz {reject}
    "haxor" -> LolDz {reject}
    "false" -> LolDz {reject}
    "wtf" -> LolDz {reject}
    "tldr" -> LolDz {reject}
    "iz" -> LolDz {reject}
    "/dev/null" -> LolDz {reject}
    "4" -> LolDz {reject}
    "2lmfao" -> LolDz {reject}
    "rofl" -> LolDz {reject}
    "true" -> LolDz {reject}
    "to" -> LolDz {reject}
    "rtfm" -> LolDz {reject}
context-free syntax
    DzStringDz -> DzString {cons("DzString1Const")}
    LolDz -> Lol {cons("Lol1Const")}
    IdDz -> Id {cons("Id1Const")}
    DzIntDz -> DzInt {cons("DzInt1Const")}
    DzFloatDz -> DzFloat {cons("DzFloat1Const")}


context-free restrictions
    Id -/- [A-Za-z0-9\_]
    DzInt -/-  [0-9]
    Lol -/- [a-zA-Z0-9\_]
