module Integration

imports Common
imports KTechnique
imports KBuiltinsBasic

imports Variables

exports

context-free syntax
context-free priorities
{
    "~Int" Int -> Int {cons("Int1235Syn")}
} > { left:
    Int "^Int" Int -> Int {left, cons("Int163Syn")}
} > { left:
    Int "*Int" Int -> Int {left, cons("Int159Syn")}
    Int "/Int" Int -> Int {left, cons("Int193Syn")}
    Int "%Int" Int -> Int {left, cons("Int1276Syn")}
    Int "divInt" Int -> Int {left, cons("Int1357Syn")}
    Int "modInt" Int -> Int {left, cons("Int160Syn")}
} > { left:
    Int "+Int" Int -> Int {left, cons("Int1293Syn")}
    Int "-Int" Int -> Int {left, cons("Int1253Syn")}
} > { left:
    Int ">>Int" Int -> Int {left, cons("Int199Syn")}
    Int "<<Int" Int -> Int {left, cons("Int1229Syn")}
} > { left:
    Int "&Int" Int -> Int {left, cons("Int1232Syn")}
} > { left:
    Int "xorInt" Int -> Int {left, cons("Int180Syn")}
} > { left:
    Int "|Int" Int -> Int {left, cons("Int179Syn")}
}

context-free priorities
{
    "--Float" Float -> Float {cons("Float1290Syn")}
} > {
    Float "^Float" Float -> Float {left, cons("Float16Syn")}
} > { left:
    Float "*Float" Float -> Float {left, cons("Float1203Syn")}
    Float "/Float" Float -> Float {left, cons("Float157Syn")}
    Float "%Float" Float -> Float {left, cons("Float1354Syn")}
} > { left:
    Float "+Float" Float -> Float {left, cons("Float1396Syn")}
    Float "-Float" Float -> Float {left, cons("Float1292Syn")}
}

context-free priorities
{
    K "|->" K -> Map {cons("Map165Syn")}
} > {
    Map Map -> Map {left, cons("Map1224Syn")}
}

context-free priorities
{
    "notBool" Bool -> Bool {cons("Bool1308Syn")}
} > {
    Bool "andBool" Bool -> Bool {left, cons("Bool1386Syn")}
    K "andThenBool" K -> Bool {left, cons("Bool1297Syn")}
} > {
    Bool "xorBool" Bool -> Bool {left, cons("Bool198Syn")}
} > {
    Bool "orBool" Bool -> Bool {left, cons("Bool1286Syn")}
    K "orElseBool" K -> Bool {left, cons("Bool1384Syn")}
} > {
    Bool "impliesBool" Bool -> Bool {left, cons("Bool1379Syn")}
} > { left:
    Bool "==Bool" Bool -> Bool {left, cons("Bool1330Syn")}
    Bool "=/=Bool" Bool -> Bool {left, cons("Bool1345Syn")}
}

context-free priorities
{ left:
    K "==K" K -> Bool {left, cons("Bool1392Syn")}
    K "=/=K" K -> Bool {left, cons("Bool177Syn")}
}

context-free priorities
{
    K "==K" K -> Bool {left, cons("Bool1392Syn")}
    Bag "==Bag" Bag -> Bool {left, cons("Bool128Syn")}
    Bag "=/=Bag" Bag -> Bool {left, cons("Bool1270Syn")}
    K "=/=K" K -> Bool {left, cons("Bool177Syn")}
} > {
    Bool "impliesBool" Bool -> Bool {left, cons("Bool1379Syn")}
    "notBool" Bool -> Bool {cons("Bool1308Syn")}
    K "andThenBool" K -> Bool {left, cons("Bool1297Syn")}
    Bool "orBool" Bool -> Bool {left, cons("Bool1286Syn")}
    K "orElseBool" K -> Bool {left, cons("Bool1384Syn")}
    Bool "xorBool" Bool -> Bool {left, cons("Bool198Syn")}
    Bool "andBool" Bool -> Bool {left, cons("Bool1386Syn")}
}

context-free priorities
{ left:
    Bag "==Bag" Bag -> Bool {left, cons("Bool128Syn")}
    Bag "=/=Bag" Bag -> Bool {left, cons("Bool1270Syn")}
}

context-free priorities
{
    Stmt -> Stmts {}
} > {
    Stmts Stmts -> Stmts {left, cons("Stmts1206Syn")}
}

%% subsorts 1
context-free priorities
{
    Nat -> K
    Val -> K
    Set -> K
    Stmts -> K
    MInt -> K
    LowerCase -> K
    CamelCaseId -> K
    Conditional -> K
    String -> K
    Int -> K
    Stmt -> K
    Assignment -> K
    Bool -> K
    Char -> K
    Stream -> K
    List -> K
    DzInt -> K
    DzString -> K
    DzBool -> K
    PascalCaseId -> K
    UpperCase -> K
    Lol -> K
    Float -> K
    IOError -> K
    Vals -> K
    Id -> K
    MetaVariable -> K
    Exp -> K
    Map -> K
    DzFloat -> K
} .> {
    DzFloat -> Float
    Bool -> Exp
    DzInt -> Int
    DzString -> String
    Bool -> Val
    Exp -> Stmt
    Int -> Exp
    Conditional -> Exp
    Int -> Val
    Assignment -> Exp
    Id -> Exp
    Val -> Vals
    DzBool -> Bool
    Bool -> Conditional
    Stmt -> Stmts
    Val -> Exp
} .> {
    K -> Nat
    K -> Val
    K -> Set
    K -> Stmts
    K -> MInt
    K -> LowerCase
    K -> CamelCaseId
    K -> Conditional
    K -> String
    K -> Int
    K -> Stmt
    K -> Assignment
    K -> Bool
    K -> Char
    K -> Stream
    K -> List
    K -> DzInt
    K -> DzString
    K -> DzBool
    K -> PascalCaseId
    K -> UpperCase
    K -> Lol
    K -> Float
    K -> IOError
    K -> Vals
    K -> Id
    K -> MetaVariable
    K -> Exp
    K -> Map
    K -> DzFloat
}

%% subsorts 1a
context-free priorities
{
    Nat -> K
    Val -> K
    Set -> K
    Stmts -> K
    MInt -> K
    LowerCase -> K
    CamelCaseId -> K
    Conditional -> K
    String -> K
    Int -> K
    Stmt -> K
    Assignment -> K
    Bool -> K
    Char -> K
    Stream -> K
    List -> K
    DzInt -> K
    DzString -> K
    DzBool -> K
    PascalCaseId -> K
    UpperCase -> K
    Lol -> K
    Float -> K
    IOError -> K
    Vals -> K
    Id -> K
    MetaVariable -> K
    Exp -> K
    Map -> K
    DzFloat -> K
} .> {
    K -> Nat
    K -> Val
    K -> Set
    K -> Stmts
    K -> MInt
    K -> LowerCase
    K -> CamelCaseId
    K -> Conditional
    K -> String
    K -> Int
    K -> Stmt
    K -> Assignment
    K -> Bool
    K -> Char
    K -> Stream
    K -> List
    K -> DzInt
    K -> DzString
    K -> DzBool
    K -> PascalCaseId
    K -> UpperCase
    K -> Lol
    K -> Float
    K -> IOError
    K -> Vals
    K -> Id
    K -> MetaVariable
    K -> Exp
    K -> Map
    K -> DzFloat
}

%% subsorts 2
context-free priorities
{
    K -> Nat
    K -> Val
    K -> Set
    K -> Stmts
    K -> MInt
    K -> LowerCase
    K -> CamelCaseId
    K -> Conditional
    K -> String
    K -> Int
    K -> Stmt
    K -> Assignment
    K -> Bool
    K -> Char
    K -> Stream
    K -> List
    K -> DzInt
    K -> DzString
    K -> DzBool
    K -> PascalCaseId
    K -> UpperCase
    K -> Lol
    K -> Float
    K -> IOError
    K -> Vals
    K -> Id
    K -> MetaVariable
    K -> Exp
    K -> Map
    K -> DzFloat
} .> {
    Nat -> K
    Val -> K
    Set -> K
    Stmts -> K
    MInt -> K
    LowerCase -> K
    CamelCaseId -> K
    Conditional -> K
    String -> K
    Int -> K
    Stmt -> K
    Assignment -> K
    Bool -> K
    Char -> K
    Stream -> K
    List -> K
    DzInt -> K
    DzString -> K
    DzBool -> K
    PascalCaseId -> K
    UpperCase -> K
    Lol -> K
    Float -> K
    IOError -> K
    Vals -> K
    Id -> K
    MetaVariable -> K
    Exp -> K
    Map -> K
    DzFloat -> K
}
context-free syntax
    "#buffer" "(" InsertDzK ")" -> Stream {cons("Stream10Syn")}
    "#read" "(" InsertDzInt "," InsertDzInt ")" -> KItem {cons("KItem12Syn")}
    K "inKList" KList -> Bool {cons("Bool13Syn")}
    "findChar" "(" InsertDzString "," InsertDzString "," InsertDzInt ")" -> Int {cons("Int14Syn")}
    "#EISDIR" -> IOError {cons("IOError15Syn")}
    "removeAll" "(" InsertDzMap "," InsertDzSet ")" -> Map {cons("Map17Syn")}
    Bool -> Exp {}
    "sqrtFloat" "(" InsertDzFloat ")" -> Float {cons("Float18Syn")}
    Map "[" InsertDzK "<-" InsertDzK "]" -> Map {cons("Map19Syn")}
    "sinFloat" "(" InsertDzFloat ")" -> Float {cons("Float120Syn")}
    Map "=Map" Map -> Bool {cons("Bool122Syn")}
    String "<String" String -> Bool {cons("Bool123Syn")}
    Set "=Set" Set -> Bool {cons("Bool124Syn")}
    "roundFloat" "(" InsertDzFloat "," InsertDzInt "," InsertDzInt ")" -> Float {cons("Float125Syn")}
    "values" "(" InsertDzMap ")" -> List {cons("List126Syn")}
    Exp "iz" Exp -> Assignment {cons("Assignment127Syn")}
    ".List" -> List {cons("List129Syn")}
    "#EBADF" -> IOError {cons("IOError130Syn")}
    "#ostream" "(" InsertDzInt ")" -> Stream {cons("Stream132Syn")}
    "KLabel2String" "(" InsertDzKLabel ")" -> String {cons("String133Syn")}
    "isBuiltin" "(" InsertDzK ")" -> Bool {cons("Bool134Syn")}
    Exp "nope" "iz" "uber" Exp -> Conditional {cons("Conditional135Syn")}
    "newline" -> KItem {cons("KItem136Syn")}
    "#stderr" -> Int {cons("Int137Syn")}
    "signFloat" "(" InsertDzFloat ")" -> Bool {cons("Bool138Syn")}
    "isKResult" "(" InsertDzKItem ")" -> Bool {cons("Bool139Syn")}
    "exponentFloat" "(" InsertDzFloat ")" -> Int {cons("Int140Syn")}
    Map "-Map" Map -> Map {cons("Map142Syn")}
    "minValueFloat" "(" InsertDzInt "," InsertDzInt ")" -> Float {cons("Float143Syn")}
    "categoryChar" "(" InsertDzString ")" -> String {cons("String144Syn")}
    "substrString" "(" InsertDzString "," InsertDzInt "," InsertDzInt ")" -> String {cons("String145Syn")}
    "#unifiable" "(" InsertDzK "," InsertDzK ")" -> Bool {cons("Bool146Syn")}
    Int "dividesInt" Int -> Bool {cons("Bool147Syn")}
    "String2KLabel" "(" InsertDzString ")" -> KLabel {cons("KLabel148Syn")}
    Set "-Set" Set -> Set {cons("Set149Syn")}
    Exp "iz" "liek" Exp -> Conditional {cons("Conditional150Syn")}
    "#rename" "(" InsertDzK "," InsertDzSet ")" -> K {cons("K152Syn")}
    "#parseInput" "(" InsertDzString "," InsertDzString ")" -> Stream {cons("Stream153Syn")}
    String "=/=String" String -> Bool {left, cons("Bool154Syn")}
    "freshId" "(" InsertDzInt ")" -> Id {cons("Id155Syn")}
    DzInt -> Int {}
    "addIdValue(" InsertDzId "," InsertDzInt ")" -> KItem {cons("KItem156Syn")}
    "#freezer" K -> KLabel {cons("KLabel158Syn")}
    Val "," Vals -> Vals {cons("Vals1ListSyn")}
    ".Vals" -> Vals {cons("Vals1Empty")}
    "ordChar" "(" InsertDzString ")" -> Int {cons("Int162Syn")}
    "#renameVariables" "(" InsertDzK ")" -> K {cons("K164Syn")}
    K "|->" K -> Map {cons("Map165Syn")}
    "freshInt" "(" InsertDzInt ")" -> Int {cons("Int166Syn")}
    "size" "(" InsertDzList ")" -> Int {cons("Int167Syn")}
    Exp "nope" "iz" "liek" Exp -> Conditional {cons("Conditional168Syn")}
    Int "=Int" Int -> Bool {cons("Bool169Syn")}
    "updateMap" "(" InsertDzMap "," InsertDzMap ")" -> Map {cons("Map170Syn")}
    "ListItem" "(" InsertDzK ")" -> List {cons("List172Syn")}
    "rofl" Exp -> Stmt {cons("Stmt173Syn")}
    "expFloat" "(" InsertDzFloat ")" -> Float {cons("Float174Syn")}
    "rfindChar" "(" InsertDzString "," InsertDzString "," InsertDzInt ")" -> Int {cons("Int175Syn")}
    "acosFloat" "(" InsertDzFloat ")" -> Float {cons("Float176Syn")}
    Exp "iz" "uber" Exp -> Conditional {cons("Conditional178Syn")}
    "#lstat" "(" InsertDzString ")" -> KList {cons("KList182Syn")}
    "trim" "(" InsertDzString ")" -> String {cons("String183Syn")}
    "#parseInModule" "(" InsertDzString "," InsertDzString "," InsertDzString ")" -> KItem {cons("KItem184Syn")}
    "maxFloat" "(" InsertDzFloat "," InsertDzFloat ")" -> Float {cons("Float185Syn")}
    "#opendir" "(" InsertDzString ")" -> KList {cons("KList186Syn")}
    Assignment -> Exp {}
    Val -> Exp {}
    Int "<Int" Int -> Bool {left, cons("Bool187Syn")}
    KLabel "=KLabel" KLabel -> Bool {cons("Bool188Syn")}
    "exponentBitsFloat" "(" InsertDzFloat ")" -> Int {cons("Int189Syn")}
    "absInt" "(" InsertDzInt ")" -> Int {cons("Int190Syn")}
    "String2Float" "(" InsertDzString ")" -> Float {cons("Float192Syn")}
    "Float2Int" "(" InsertDzFloat ")" -> Int {cons("Int194Syn")}
    "cool" "(" InsertDzK ")" -> K {cons("K195Syn")}
    "wtf" InsertDzExp InsertDzStmts "brb" -> Stmt {cons("Stmt196Syn")}
    "range" "(" InsertDzList "," InsertDzInt "," InsertDzInt ")" -> List {cons("List197Syn")}
    "rtrim" "(" InsertDzString ")" -> String {cons("String1200Syn")}
    "#freezeVariables" "(" InsertDzK "," InsertDzK ")" -> K {cons("K1202Syn")}
    "cosFloat" "(" InsertDzFloat ")" -> Float {cons("Float1204Syn")}
    "chrChar" "(" InsertDzInt ")" -> String {cons("String1205Syn")}
    "directionalityChar" "(" InsertDzString ")" -> String {cons("String1207Syn")}
    DzBool -> Bool {}
    "isNaN" "(" InsertDzFloat ")" -> Bool {cons("Bool1208Syn")}
    Set "<=Set" Set -> Bool {cons("Bool1209Syn")}
    KList "=KList" KList -> Bool {cons("Bool1220Syn")}
    Float ">=Float" Float -> Bool {left, cons("Bool1222Syn")}
    Float "<Float" Float -> Bool {left, cons("Bool1223Syn")}
    Map Map -> Map {left, cons("Map1224Syn")}
    "atan2Float" "(" InsertDzFloat "," InsertDzFloat ")" -> Float {cons("Float1225Syn")}
    "Float2String" "(" InsertDzFloat ")" -> String {cons("String1226Syn")}
    "#putc" "(" InsertDzInt "," InsertDzInt ")" -> K {cons("K1227Syn")}
    "randomRandom" "(" InsertDzInt ")" -> Int {cons("Int1228Syn")}
    "#noIO" -> Stream {cons("Stream1230Syn")}
    Float "=/=Float" Float -> Bool {left, cons("Bool1233Syn")}
    "#tokenToString" "(" InsertDzK ")" -> String {cons("String1234Syn")}
    "#EACCES" -> IOError {cons("IOError1236Syn")}
    "#parse" "(" InsertDzString "," InsertDzString ")" -> KItem {cons("KItem1237Syn")}
    List "=List" List -> Bool {cons("Bool1238Syn")}
    "intersectSet" "(" InsertDzSet "," InsertDzSet ")" -> Set {cons("Set1239Syn")}
    "Base2String" "(" InsertDzInt "," InsertDzInt ")" -> String {cons("String1240Syn")}
    "findString" "(" InsertDzString "," InsertDzString "," InsertDzInt ")" -> Int {cons("Int1242Syn")}
    "Int2String" "(" InsertDzInt ")" -> String {cons("String1243Syn")}
    Set Set -> Set {left, cons("Set1245Syn")}
    "ltrim" "(" InsertDzString ")" -> String {cons("String1246Syn")}
    Map "[" InsertDzK "]" -> K {cons("K1247Syn")}
    "#write" "(" InsertDzInt "," InsertDzString ")" -> K {cons("K1248Syn")}
    K "#inKList" KList -> Bool {cons("Bool1249Syn")}
    "rootFloat" "(" InsertDzFloat "," InsertDzInt ")" -> Float {cons("Float1250Syn")}
    "absFloat" "(" InsertDzFloat ")" -> Float {cons("Float1252Syn")}
    "#if" InsertDzBool "#then" InsertDzK "#else" InsertDzK "#fi" -> K {cons("K1254Syn")}
    "#isWhiteSpace" "(" InsertDzString ")" -> Bool {cons("Bool1255Syn")}
    "logFloat" "(" InsertDzFloat ")" -> Float {cons("Float1256Syn")}
    "SetItem" "(" InsertDzK ")" -> Set {cons("Set1257Syn")}
    "#open" "(" InsertDzString "," InsertDzString ")" -> KItem {cons("KItem1258Syn")}
    Int -> Val {}
    "choice" "(" InsertDzSet ")" -> K {cons("K1259Syn")}
    KLabel "==KLabel" KLabel -> Bool {cons("Bool1260Syn")}
    "String2Int" "(" InsertDzString ")" -> Int {cons("Int1262Syn")}
    "#variablesMap" "(" InsertDzK ")" -> KItem {cons("KItem1263Syn")}
    K -> KList {}
    KList "=/=KList" KList -> Bool {cons("Bool1264Syn")}
    Int "=/=Int" Int -> Bool {left, cons("Bool1265Syn")}
    "#isDigit" "(" InsertDzString ")" -> Bool {cons("Bool1266Syn")}
    DzString -> String {}
    "fpNaN" "(" InsertDzInt "," InsertDzInt ")" -> Float {cons("Float1267Syn")}
    "isInfinite" "(" InsertDzFloat ")" -> Bool {cons("Bool1269Syn")}
    "fresh" "(" InsertDzString ")" -> KItem {cons("KItem1272Syn")}
    DzFloat -> Float {}
    "while" "(" InsertDzExp "nope" "iz" "liek" InsertDzExp ")" "{" InsertDzStmts "}" -> KItem {cons("KItem1274Syn")}
    "rfindString" "(" InsertDzString "," InsertDzString "," InsertDzInt ")" -> Int {cons("Int1275Syn")}
    "Id2String" "(" InsertDzId ")" -> String {cons("String1277Syn")}
    "#ELOOP" -> IOError {cons("IOError1278Syn")}
    "lmao" Exp -> Conditional {cons("Conditional1279Syn")}
    "String2Base" "(" InsertDzString "," InsertDzInt ")" -> Int {cons("Int1280Syn")}
    "4thelulz" InsertDzExp "iz" InsertDzExp "lmfao2" InsertDzExp InsertDzStmts "ayylmao" -> Stmt {cons("Stmt1282Syn")}
    "#systemResult" "(" InsertDzInt "," InsertDzString "," InsertDzString ")" -> KItem {cons("KItem1283Syn")}
    "keys" "(" InsertDzMap ")" -> Set {cons("Set1284Syn")}
    "#stdin" -> Int {cons("Int1285Syn")}
    "maxInt" "(" InsertDzInt "," InsertDzInt ")" -> Int {cons("Int1287Syn")}
    "lengthString" "(" InsertDzString ")" -> Int {cons("Int1288Syn")}
    "#configuration" -> Bag {cons("Bag1289Syn")}
    Conditional -> Exp {}
    "#parseToken" "(" InsertDzString "," InsertDzString ")" -> KItem {cons("KItem1294Syn")}
    "#system" "(" InsertDzString ")" -> KItem {cons("KItem1295Syn")}
    "#stat" "(" InsertDzString ")" -> KList {cons("KList1298Syn")}
    Float "<=Float" Float -> Bool {left, cons("Bool1299Syn")}
    KItem -> K {}
    "debug" -> KItem {cons("KItem1300Syn")}
    "tanFloat" "(" InsertDzFloat ")" -> Float {cons("Float1302Syn")}
    "replace" "(" InsertDzString "," InsertDzString "," InsertDzString "," InsertDzInt ")" -> String {cons("String1303Syn")}
    ".Set" -> Set {cons("Set1304Syn")}
    "#close" "(" InsertDzInt ")" -> K {cons("K1305Syn")}
    "minInt" "(" InsertDzInt "," InsertDzInt ")" -> Int {cons("Int1306Syn")}
    List List -> List {left, cons("List1307Syn")}
    "maxValueFloat" "(" InsertDzInt "," InsertDzInt ")" -> Float {cons("Float1309Syn")}
    Map "<=Map" Map -> Bool {cons("Bool1320Syn")}
    Int ">Int" Int -> Bool {left, cons("Bool1322Syn")}
    "String2Id" "(" InsertDzString ")" -> Id {cons("Id1323Syn")}
    "ceilFloat" "(" InsertDzFloat ")" -> Float {cons("Float1324Syn")}
    "#ENOTDIR" -> IOError {cons("IOError1325Syn")}
    "addId(" InsertDzId ")" -> KItem {cons("KItem1326Syn")}
    String "==String" String -> Bool {left, cons("Bool1327Syn")}
    "atanFloat" "(" InsertDzFloat ")" -> Float {cons("Float1328Syn")}
    Bool -> Conditional {}
    String "+String" String -> String {left, cons("String1329Syn")}
    String ">=String" String -> Bool {cons("Bool1332Syn")}
    Int "<=Int" Int -> Bool {left, cons("Bool1333Syn")}
    K "in" Set -> Bool {cons("Bool1334Syn")}
    ".Map" -> Map {cons("Map1335Syn")}
    KLabel "=/=KLabel" KLabel -> Bool {cons("Bool1336Syn")}
    KList "==KList" KList -> Bool {cons("Bool1337Syn")}
    Int -> Exp {}
    Int "==Int" Int -> Bool {left, cons("Bool1338Syn")}
    "Char2String" "(" InsertDzChar ")" -> String {cons("String1339Syn")}
    "replaceAll" "(" InsertDzString "," InsertDzString "," InsertDzString ")" -> String {cons("String1342Syn")}
    Int ">=Int" Int -> Bool {left, cons("Bool1343Syn")}
    "#ENOENT" -> IOError {cons("IOError1344Syn")}
    "#EINVAL" -> IOError {cons("IOError1346Syn")}
    String ">String" String -> Bool {cons("Bool1347Syn")}
    Bag "=Bag" Bag -> Bool {cons("Bool1348Syn")}
    "isToken" "(" InsertDzK ")" -> Bool {cons("Bool1349Syn")}
    "floorFloat" "(" InsertDzFloat ")" -> Float {cons("Float1350Syn")}
    Bool -> Val {}
    "precisionFloat" "(" InsertDzFloat ")" -> Int {cons("Int1352Syn")}
    List "[" InsertDzInt "]" -> K {cons("K1353Syn")}
    "String2Char" "(" InsertDzString ")" -> Char {cons("Char1355Syn")}
    "#stdout" -> Int {cons("Int1356Syn")}
    "#noparse" -> IOError {cons("IOError1358Syn")}
    Exp -> Stmt {}
    Float ">Float" Float -> Bool {left, cons("Bool1359Syn")}
    "minusInfinity" "(" InsertDzInt "," InsertDzInt ")" -> Float {cons("Float1360Syn")}
    "Int2Float" "(" InsertDzInt "," InsertDzInt "," InsertDzInt ")" -> Float {cons("Float1362Syn")}
    "#istream" "(" InsertDzInt ")" -> Stream {cons("Stream1363Syn")}
    "replaceFirst" "(" InsertDzString "," InsertDzString "," InsertDzString ")" -> String {cons("String1364Syn")}
    KResult -> KItem {}
    "#ENAMETOOLONG" -> IOError {cons("IOError1365Syn")}
    "plusInfinity" "(" InsertDzInt "," InsertDzInt ")" -> Float {cons("Float1366Syn")}
    "significandFloat" "(" InsertDzFloat ")" -> MInt {cons("MInt1367Syn")}
    "getKLabel" K -> KLabel {cons("KLabel1368Syn")}
    Float "==Float" Float -> Bool {left, cons("Bool1369Syn")}
    "size" "(" InsertDzMap ")" -> Int {cons("Int1370Syn")}
    "dummy" "(" InsertDzKList ")" -> KItem {cons("KItem1372Syn")}
    "#getc" "(" InsertDzInt ")" -> KItem {cons("KItem1373Syn")}
    "bool2Int" "(" InsertDzBool ")" -> Int {cons("Int1374Syn")}
    "minFloat" "(" InsertDzFloat "," InsertDzFloat ")" -> Float {cons("Float1375Syn")}
    String "<=String" String -> Bool {cons("Bool1377Syn")}
    "#EOF" -> IOError {cons("IOError1378Syn")}
    "#tell" "(" InsertDzInt ")" -> KItem {cons("KItem1380Syn")}
    "#open" "(" InsertDzString ")" -> KItem {cons("KItem1382Syn")}
    "choice" "(" InsertDzMap ")" -> K {cons("K1383Syn")}
    "countAllOccurences" "(" InsertDzString "," InsertDzString ")" -> Int {cons("Int1385Syn")}
    "#metaVariables" "(" InsertDzK ")" -> Set {cons("Set1387Syn")}
    Id -> Exp {}
    K "=K" K -> Bool {cons("Bool1388Syn")}
    "size" "(" InsertDzSet ")" -> Int {cons("Int1389Syn")}
    "#ESPIPE" -> IOError {cons("IOError1390Syn")}
    Map "[" InsertDzK "<-" "undef" "]" -> Map {cons("Map1393Syn")}
    K "in" List -> Bool {cons("Bool1394Syn")}
    "#variables" "(" InsertDzK ")" -> Set {cons("Set1395Syn")}
    "#seek" "(" InsertDzInt "," InsertDzInt ")" -> K {cons("K1397Syn")}
    "#ioError" "(" InsertDzString ")" -> KItem {cons("KItem1398Syn")}
    "asinFloat" "(" InsertDzFloat ")" -> Float {cons("Float1399Syn")}
    Set    -> InsertDzSet
    Stmts    -> InsertDzStmts
    K    -> InsertDzK
    String    -> InsertDzString
    KList    -> InsertDzKList
    Int    -> InsertDzInt
    Float    -> InsertDzFloat
    KLabel    -> InsertDzKLabel
    Bool    -> InsertDzBool
    Char    -> InsertDzChar
    List    -> InsertDzList
    Id    -> InsertDzId
    Exp    -> InsertDzExp
    Map    -> InsertDzMap
    KItem    -> InsertDzKItem


    VARID  ":Nat"        -> NatDzVar            {cons("Nat12Var")}
    VARID  ":Nat{" TagListDz "}"        -> NatDzVar            {cons("Nat12VarAttr")}
    VARID  ":Val"        -> ValDzVar            {cons("Val12Var")}
    VARID  ":Val{" TagListDz "}"        -> ValDzVar            {cons("Val12VarAttr")}
    VARID  ":Set"        -> SetDzVar            {cons("Set12Var")}
    VARID  ":Set{" TagListDz "}"        -> SetDzVar            {cons("Set12VarAttr")}
    VARID  ":Stmts"        -> StmtsDzVar            {cons("Stmts12Var")}
    VARID  ":Stmts{" TagListDz "}"        -> StmtsDzVar            {cons("Stmts12VarAttr")}
    VARID  ":MInt"        -> MIntDzVar            {cons("MInt12Var")}
    VARID  ":MInt{" TagListDz "}"        -> MIntDzVar            {cons("MInt12VarAttr")}
    VARID  ":LowerCase"        -> LowerCaseDzVar            {cons("LowerCase12Var")}
    VARID  ":LowerCase{" TagListDz "}"        -> LowerCaseDzVar            {cons("LowerCase12VarAttr")}
    VARID  ":CamelCaseId"        -> CamelCaseIdDzVar            {cons("CamelCaseId12Var")}
    VARID  ":CamelCaseId{" TagListDz "}"        -> CamelCaseIdDzVar            {cons("CamelCaseId12VarAttr")}
    VARID  ":Conditional"        -> ConditionalDzVar            {cons("Conditional12Var")}
    VARID  ":Conditional{" TagListDz "}"        -> ConditionalDzVar            {cons("Conditional12VarAttr")}
    VARID  ":String"        -> StringDzVar            {cons("String12Var")}
    VARID  ":String{" TagListDz "}"        -> StringDzVar            {cons("String12VarAttr")}
    VARID  ":Int"        -> IntDzVar            {cons("Int12Var")}
    VARID  ":Int{" TagListDz "}"        -> IntDzVar            {cons("Int12VarAttr")}
    VARID  ":Stmt"        -> StmtDzVar            {cons("Stmt12Var")}
    VARID  ":Stmt{" TagListDz "}"        -> StmtDzVar            {cons("Stmt12VarAttr")}
    VARID  ":Assignment"        -> AssignmentDzVar            {cons("Assignment12Var")}
    VARID  ":Assignment{" TagListDz "}"        -> AssignmentDzVar            {cons("Assignment12VarAttr")}
    VARID  ":Bool"        -> BoolDzVar            {cons("Bool12Var")}
    VARID  ":Bool{" TagListDz "}"        -> BoolDzVar            {cons("Bool12VarAttr")}
    VARID  ":Char"        -> CharDzVar            {cons("Char12Var")}
    VARID  ":Char{" TagListDz "}"        -> CharDzVar            {cons("Char12VarAttr")}
    VARID  ":Stream"        -> StreamDzVar            {cons("Stream12Var")}
    VARID  ":Stream{" TagListDz "}"        -> StreamDzVar            {cons("Stream12VarAttr")}
    VARID  ":List"        -> ListDzVar            {cons("List12Var")}
    VARID  ":List{" TagListDz "}"        -> ListDzVar            {cons("List12VarAttr")}
    VARID  ":#Int"        -> DzIntDzVar            {cons("DzInt12Var")}
    VARID  ":#Int{" TagListDz "}"        -> DzIntDzVar            {cons("DzInt12VarAttr")}
    VARID  ":#String"        -> DzStringDzVar            {cons("DzString12Var")}
    VARID  ":#String{" TagListDz "}"        -> DzStringDzVar            {cons("DzString12VarAttr")}
    VARID  ":#Bool"        -> DzBoolDzVar            {cons("DzBool12Var")}
    VARID  ":#Bool{" TagListDz "}"        -> DzBoolDzVar            {cons("DzBool12VarAttr")}
    VARID  ":PascalCaseId"        -> PascalCaseIdDzVar            {cons("PascalCaseId12Var")}
    VARID  ":PascalCaseId{" TagListDz "}"        -> PascalCaseIdDzVar            {cons("PascalCaseId12VarAttr")}
    VARID  ":UpperCase"        -> UpperCaseDzVar            {cons("UpperCase12Var")}
    VARID  ":UpperCase{" TagListDz "}"        -> UpperCaseDzVar            {cons("UpperCase12VarAttr")}
    VARID  ":Lol"        -> LolDzVar            {cons("Lol12Var")}
    VARID  ":Lol{" TagListDz "}"        -> LolDzVar            {cons("Lol12VarAttr")}
    VARID  ":Float"        -> FloatDzVar            {cons("Float12Var")}
    VARID  ":Float{" TagListDz "}"        -> FloatDzVar            {cons("Float12VarAttr")}
    VARID  ":IOError"        -> IOErrorDzVar            {cons("IOError12Var")}
    VARID  ":IOError{" TagListDz "}"        -> IOErrorDzVar            {cons("IOError12VarAttr")}
    VARID  ":Vals"        -> ValsDzVar            {cons("Vals12Var")}
    VARID  ":Vals{" TagListDz "}"        -> ValsDzVar            {cons("Vals12VarAttr")}
    VARID  ":Id"        -> IdDzVar            {cons("Id12Var")}
    VARID  ":Id{" TagListDz "}"        -> IdDzVar            {cons("Id12VarAttr")}
    VARID  ":MetaVariable"        -> MetaVariableDzVar            {cons("MetaVariable12Var")}
    VARID  ":MetaVariable{" TagListDz "}"        -> MetaVariableDzVar            {cons("MetaVariable12VarAttr")}
    VARID  ":Exp"        -> ExpDzVar            {cons("Exp12Var")}
    VARID  ":Exp{" TagListDz "}"        -> ExpDzVar            {cons("Exp12VarAttr")}
    VARID  ":Map"        -> MapDzVar            {cons("Map12Var")}
    VARID  ":Map{" TagListDz "}"        -> MapDzVar            {cons("Map12VarAttr")}
    VARID  ":#Float"        -> DzFloatDzVar            {cons("DzFloat12Var")}
    VARID  ":#Float{" TagListDz "}"        -> DzFloatDzVar            {cons("DzFloat12VarAttr")}

     K CastTypeDz "Nat"    -> VariableDz    {cons("Nat1Cast")}
     K CastTypeDz "Nat{" TagListDz "}"    -> VariableDz    {cons("Nat1CastAttr")}
     K CastTypeDz "Val"    -> VariableDz    {cons("Val1Cast")}
     K CastTypeDz "Val{" TagListDz "}"    -> VariableDz    {cons("Val1CastAttr")}
     K CastTypeDz "Set"    -> VariableDz    {cons("Set1Cast")}
     K CastTypeDz "Set{" TagListDz "}"    -> VariableDz    {cons("Set1CastAttr")}
     K CastTypeDz "Stmts"    -> VariableDz    {cons("Stmts1Cast")}
     K CastTypeDz "Stmts{" TagListDz "}"    -> VariableDz    {cons("Stmts1CastAttr")}
     K CastTypeDz "MInt"    -> VariableDz    {cons("MInt1Cast")}
     K CastTypeDz "MInt{" TagListDz "}"    -> VariableDz    {cons("MInt1CastAttr")}
     K CastTypeDz "LowerCase"    -> VariableDz    {cons("LowerCase1Cast")}
     K CastTypeDz "LowerCase{" TagListDz "}"    -> VariableDz    {cons("LowerCase1CastAttr")}
     K CastTypeDz "CamelCaseId"    -> VariableDz    {cons("CamelCaseId1Cast")}
     K CastTypeDz "CamelCaseId{" TagListDz "}"    -> VariableDz    {cons("CamelCaseId1CastAttr")}
     K CastTypeDz "Conditional"    -> VariableDz    {cons("Conditional1Cast")}
     K CastTypeDz "Conditional{" TagListDz "}"    -> VariableDz    {cons("Conditional1CastAttr")}
     K CastTypeDz "String"    -> VariableDz    {cons("String1Cast")}
     K CastTypeDz "String{" TagListDz "}"    -> VariableDz    {cons("String1CastAttr")}
     K CastTypeDz "Int"    -> VariableDz    {cons("Int1Cast")}
     K CastTypeDz "Int{" TagListDz "}"    -> VariableDz    {cons("Int1CastAttr")}
     K CastTypeDz "Stmt"    -> VariableDz    {cons("Stmt1Cast")}
     K CastTypeDz "Stmt{" TagListDz "}"    -> VariableDz    {cons("Stmt1CastAttr")}
     K CastTypeDz "Assignment"    -> VariableDz    {cons("Assignment1Cast")}
     K CastTypeDz "Assignment{" TagListDz "}"    -> VariableDz    {cons("Assignment1CastAttr")}
     K CastTypeDz "Bool"    -> VariableDz    {cons("Bool1Cast")}
     K CastTypeDz "Bool{" TagListDz "}"    -> VariableDz    {cons("Bool1CastAttr")}
     K CastTypeDz "Char"    -> VariableDz    {cons("Char1Cast")}
     K CastTypeDz "Char{" TagListDz "}"    -> VariableDz    {cons("Char1CastAttr")}
     K CastTypeDz "Stream"    -> VariableDz    {cons("Stream1Cast")}
     K CastTypeDz "Stream{" TagListDz "}"    -> VariableDz    {cons("Stream1CastAttr")}
     K CastTypeDz "List"    -> VariableDz    {cons("List1Cast")}
     K CastTypeDz "List{" TagListDz "}"    -> VariableDz    {cons("List1CastAttr")}
     K CastTypeDz "#Int"    -> VariableDz    {cons("DzInt1Cast")}
     K CastTypeDz "#Int{" TagListDz "}"    -> VariableDz    {cons("DzInt1CastAttr")}
     K CastTypeDz "#String"    -> VariableDz    {cons("DzString1Cast")}
     K CastTypeDz "#String{" TagListDz "}"    -> VariableDz    {cons("DzString1CastAttr")}
     K CastTypeDz "#Bool"    -> VariableDz    {cons("DzBool1Cast")}
     K CastTypeDz "#Bool{" TagListDz "}"    -> VariableDz    {cons("DzBool1CastAttr")}
     K CastTypeDz "PascalCaseId"    -> VariableDz    {cons("PascalCaseId1Cast")}
     K CastTypeDz "PascalCaseId{" TagListDz "}"    -> VariableDz    {cons("PascalCaseId1CastAttr")}
     K CastTypeDz "UpperCase"    -> VariableDz    {cons("UpperCase1Cast")}
     K CastTypeDz "UpperCase{" TagListDz "}"    -> VariableDz    {cons("UpperCase1CastAttr")}
     K CastTypeDz "Lol"    -> VariableDz    {cons("Lol1Cast")}
     K CastTypeDz "Lol{" TagListDz "}"    -> VariableDz    {cons("Lol1CastAttr")}
     K CastTypeDz "Float"    -> VariableDz    {cons("Float1Cast")}
     K CastTypeDz "Float{" TagListDz "}"    -> VariableDz    {cons("Float1CastAttr")}
     K CastTypeDz "IOError"    -> VariableDz    {cons("IOError1Cast")}
     K CastTypeDz "IOError{" TagListDz "}"    -> VariableDz    {cons("IOError1CastAttr")}
     K CastTypeDz "Vals"    -> VariableDz    {cons("Vals1Cast")}
     K CastTypeDz "Vals{" TagListDz "}"    -> VariableDz    {cons("Vals1CastAttr")}
     K CastTypeDz "Id"    -> VariableDz    {cons("Id1Cast")}
     K CastTypeDz "Id{" TagListDz "}"    -> VariableDz    {cons("Id1CastAttr")}
     K CastTypeDz "MetaVariable"    -> VariableDz    {cons("MetaVariable1Cast")}
     K CastTypeDz "MetaVariable{" TagListDz "}"    -> VariableDz    {cons("MetaVariable1CastAttr")}
     K CastTypeDz "Exp"    -> VariableDz    {cons("Exp1Cast")}
     K CastTypeDz "Exp{" TagListDz "}"    -> VariableDz    {cons("Exp1CastAttr")}
     K CastTypeDz "Map"    -> VariableDz    {cons("Map1Cast")}
     K CastTypeDz "Map{" TagListDz "}"    -> VariableDz    {cons("Map1CastAttr")}
     K CastTypeDz "#Float"    -> VariableDz    {cons("DzFloat1Cast")}
     K CastTypeDz "#Float{" TagListDz "}"    -> VariableDz    {cons("DzFloat1CastAttr")}
     NatDzVar   -> Nat
     ValDzVar   -> Val
     SetDzVar   -> Set
     StmtsDzVar   -> Stmts
     MIntDzVar   -> MInt
     LowerCaseDzVar   -> LowerCase
     CamelCaseIdDzVar   -> CamelCaseId
     ConditionalDzVar   -> Conditional
     StringDzVar   -> String
     IntDzVar   -> Int
     StmtDzVar   -> Stmt
     AssignmentDzVar   -> Assignment
     BoolDzVar   -> Bool
     CharDzVar   -> Char
     StreamDzVar   -> Stream
     ListDzVar   -> List
     DzIntDzVar   -> DzInt
     DzStringDzVar   -> DzString
     DzBoolDzVar   -> DzBool
     PascalCaseIdDzVar   -> PascalCaseId
     UpperCaseDzVar   -> UpperCase
     LolDzVar   -> Lol
     FloatDzVar   -> Float
     IOErrorDzVar   -> IOError
     ValsDzVar   -> Vals
     IdDzVar   -> Id
     MetaVariableDzVar   -> MetaVariable
     ExpDzVar   -> Exp
     MapDzVar   -> Map
     DzFloatDzVar   -> DzFloat
     K CastTypeDz "K"                         -> VariableDz    {cons("K1Cast")}
     K CastTypeDz "KItem"                     -> VariableDz    {cons("KItem1Cast")}
     K CastTypeDz "K{" TagListDz "}"        -> VariableDz    {cons("K1CastAttr")}
     K CastTypeDz "KItem{" TagListDz "}"    -> VariableDz    {cons("KItem1CastAttr")}

    VariableDz -> K


    DzDzString        -> DzString    {cons("DzString1Const")}
    DzDzBool        -> DzBool    {cons("DzBool1Const")}
    DzKLabel        -> KLabel    {cons("KLabel1Const")}
    DzDzInt        -> DzInt    {cons("DzInt1Const")}
    DzDzId        -> DzId    {cons("DzId1Const")}
    DzDzFloat        -> DzFloat    {cons("DzFloat1Const")}


context-free restrictions
    NatDzVar -/- [a-zA-Z0-9]
    ValDzVar -/- [a-zA-Z0-9]
    SetDzVar -/- [a-zA-Z0-9]
    StmtsDzVar -/- [a-zA-Z0-9]
    MIntDzVar -/- [a-zA-Z0-9]
    LowerCaseDzVar -/- [a-zA-Z0-9]
    CamelCaseIdDzVar -/- [a-zA-Z0-9]
    ConditionalDzVar -/- [a-zA-Z0-9]
    StringDzVar -/- [a-zA-Z0-9]
    IntDzVar -/- [a-zA-Z0-9]
    StmtDzVar -/- [a-zA-Z0-9]
    AssignmentDzVar -/- [a-zA-Z0-9]
    BoolDzVar -/- [a-zA-Z0-9]
    CharDzVar -/- [a-zA-Z0-9]
    StreamDzVar -/- [a-zA-Z0-9]
    ListDzVar -/- [a-zA-Z0-9]
    DzIntDzVar -/- [a-zA-Z0-9]
    DzStringDzVar -/- [a-zA-Z0-9]
    DzBoolDzVar -/- [a-zA-Z0-9]
    PascalCaseIdDzVar -/- [a-zA-Z0-9]
    UpperCaseDzVar -/- [a-zA-Z0-9]
    LolDzVar -/- [a-zA-Z0-9]
    FloatDzVar -/- [a-zA-Z0-9]
    IOErrorDzVar -/- [a-zA-Z0-9]
    ValsDzVar -/- [a-zA-Z0-9]
    IdDzVar -/- [a-zA-Z0-9]
    MetaVariableDzVar -/- [a-zA-Z0-9]
    ExpDzVar -/- [a-zA-Z0-9]
    MapDzVar -/- [a-zA-Z0-9]
    DzFloatDzVar -/- [a-zA-Z0-9]
    VariableDz -/- [a-zA-Z0-9]
lexical syntax
    "#token" -> DzKLabel
    "Infinity" -> DzDzFloat
    "true" -> DzDzBool
    "'#andBool" -> DzKLabel
    "NaN" -> DzDzFloat
    "false" -> DzDzBool


%% sort predicates
    "isNat"      -> DzKLabel
    "isSymbolicNat"      -> DzKLabel
    "#symNat"      -> DzKLabel
    "isVal"      -> DzKLabel
    "isSymbolicVal"      -> DzKLabel
    "#symVal"      -> DzKLabel
    "isSet"      -> DzKLabel
    "isSymbolicSet"      -> DzKLabel
    "#symSet"      -> DzKLabel
    "isStmts"      -> DzKLabel
    "isSymbolicStmts"      -> DzKLabel
    "#symStmts"      -> DzKLabel
    "isMInt"      -> DzKLabel
    "isSymbolicMInt"      -> DzKLabel
    "#symMInt"      -> DzKLabel
    "isLowerCase"      -> DzKLabel
    "isSymbolicLowerCase"      -> DzKLabel
    "#symLowerCase"      -> DzKLabel
    "isCamelCaseId"      -> DzKLabel
    "isSymbolicCamelCaseId"      -> DzKLabel
    "#symCamelCaseId"      -> DzKLabel
    "isConditional"      -> DzKLabel
    "isSymbolicConditional"      -> DzKLabel
    "#symConditional"      -> DzKLabel
    "isSymbolicK"      -> DzKLabel
    "#symK"      -> DzKLabel
    "isString"      -> DzKLabel
    "isSymbolicString"      -> DzKLabel
    "#symString"      -> DzKLabel
    "isInt"      -> DzKLabel
    "isSymbolicInt"      -> DzKLabel
    "#symInt"      -> DzKLabel
    "isStmt"      -> DzKLabel
    "isSymbolicStmt"      -> DzKLabel
    "#symStmt"      -> DzKLabel
    "isAssignment"      -> DzKLabel
    "isSymbolicAssignment"      -> DzKLabel
    "#symAssignment"      -> DzKLabel
    "isBool"      -> DzKLabel
    "isSymbolicBool"      -> DzKLabel
    "#symBool"      -> DzKLabel
    "isChar"      -> DzKLabel
    "isSymbolicChar"      -> DzKLabel
    "#symChar"      -> DzKLabel
    "isStream"      -> DzKLabel
    "isSymbolicStream"      -> DzKLabel
    "#symStream"      -> DzKLabel
    "isList"      -> DzKLabel
    "isSymbolicList"      -> DzKLabel
    "#symList"      -> DzKLabel
    "is#Int"      -> DzKLabel
    "is#String"      -> DzKLabel
    "is#Bool"      -> DzKLabel
    "isPascalCaseId"      -> DzKLabel
    "isSymbolicPascalCaseId"      -> DzKLabel
    "#symPascalCaseId"      -> DzKLabel
    "isUpperCase"      -> DzKLabel
    "isSymbolicUpperCase"      -> DzKLabel
    "#symUpperCase"      -> DzKLabel
    "isLol"      -> DzKLabel
    "isSymbolicLol"      -> DzKLabel
    "#symLol"      -> DzKLabel
    "isKResult"      -> DzKLabel
    "isSymbolicKResult"      -> DzKLabel
    "#symKResult"      -> DzKLabel
    "isFloat"      -> DzKLabel
    "isSymbolicFloat"      -> DzKLabel
    "#symFloat"      -> DzKLabel
    "isIOError"      -> DzKLabel
    "isSymbolicIOError"      -> DzKLabel
    "#symIOError"      -> DzKLabel
    "isVals"      -> DzKLabel
    "isSymbolicVals"      -> DzKLabel
    "#symVals"      -> DzKLabel
    "isId"      -> DzKLabel
    "isSymbolicId"      -> DzKLabel
    "#symId"      -> DzKLabel
    "isMetaVariable"      -> DzKLabel
    "isSymbolicMetaVariable"      -> DzKLabel
    "#symMetaVariable"      -> DzKLabel
    "isExp"      -> DzKLabel
    "isSymbolicExp"      -> DzKLabel
    "#symExp"      -> DzKLabel
    "isSymbolicKItem"      -> DzKLabel
    "#symKItem"      -> DzKLabel
    "isMap"      -> DzKLabel
    "isSymbolicMap"      -> DzKLabel
    "#symMap"      -> DzKLabel
    "is#Float"      -> DzKLabel



%% terminals reject
    "Int2Float" -> VARID {reject}
    "String2Base" -> VARID {reject}
    "Base2String" -> VARID {reject}
    "KLabel2String" -> VARID {reject}
    "Infinity" -> VARID {reject}
    "NaN" -> VARID {reject}
    "String2Int" -> VARID {reject}
    "ListItem" -> VARID {reject}
    "Float2Int" -> VARID {reject}
    "Float2String" -> VARID {reject}
    "String2Id" -> VARID {reject}
    "String2Float" -> VARID {reject}
    "String2KLabel" -> VARID {reject}
    "Int2String" -> VARID {reject}
    "Char2String" -> VARID {reject}
    "String2Char" -> VARID {reject}
    "Id2String" -> VARID {reject}
    "SetItem" -> VARID {reject}

lexical restrictions
    %% follow restrictions
    "fresh" -/- [I].[n].[t]
    "==K" -/- [L].[i].[s].[t]
    "in" -/- [K].[L].[i].[s].[t]
    "#parse" -/- [I].[n].[M].[o].[d].[u].[l].[e]
    "replace" -/- [F].[i].[r].[s].[t]
    "#system" -/- [R].[e].[s].[u].[l].[t]
    "fresh" -/- [I].[d]
    "#rename" -/- [V].[a].[r].[i].[a].[b].[l].[e].[s]
    "#parse" -/- [I].[n].[p].[u].[t]
    "replace" -/- [A].[l].[l]
    "#parse" -/- [T].[o].[k].[e].[n]
    "=/=K" -/- [L].[a].[b].[e].[l]
    "=/=K" -/- [L].[i].[s].[t]
    "=K" -/- [L].[a].[b].[e].[l]
    "#token" -/- [T].[o].[S].[t].[r].[i].[n].[g]
    "=K" -/- [L].[i].[s].[t]
    "==K" -/- [L].[a].[b].[e].[l]
    "#variables" -/- [M].[a].[p]
lexical restrictions
%% some restrictions to ensure greedy matching for user defined constants
    "is" -/- [\#A-Z]

lexical syntax
    [\-\+]? [0-9]+ -> DzIntDz
    [\+\-]?[0-9]+"."[0-9]+([eE][\+\-]?[0-9]+)?([fFdD]|([pP][0-9]+[xX][0-9]+))? -> DzFloatDz
    [\+\-]?"Infinity"([fFdD]|([pP][0-9]+[xX][0-9]+))? -> DzFloatDz
    "Infinity" -> DzFloatDz {reject}
    "NaN"([fFdD]|([pP][0-9]+[xX][0-9]+))? -> DzFloatDz
    "NaN" -> DzFloatDz {reject}
    "\"" ((~[\"\n\r\\]) | (((([\\][nrtf\"\\]) | ([\\][x][0-9a-fA-F][0-9a-fA-F])) | ([\\][u][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F])) | ([\\][U][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F])))* "\"" -> DzStringDz
context-free syntax
    DzStringDz -> DzString {cons("DzString1Const")}
    DzIntDz -> DzInt {cons("DzInt1Const")}
    DzFloatDz -> DzFloat {cons("DzFloat1Const")}


context-free restrictions
    DzInt -/-  [0-9]
